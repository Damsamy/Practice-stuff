# make a function that filters strings from a list.

def filter_list(l):
    for x in l:
        if str in list:
            l.remove(str)
        else:
            continue

    return l

print(filter_list([1,'a','b',0,15]))


# Test 2
# The goal of this exercise is to convert a string to a new string where each character in the new string is 
# "(" if that character appears only once in the original string, or ")" if that character appears more than once in the original string. 
# Ignore capitalization when determining if a character is a duplicate.

"din"      =>  "((("
"recede"   =>  "()()()"
"Success"  =>  ")())())"
"(( @"     =>  "))((" 
# solution is:

def duplicate_encode(word):
    a = ""
    word2 = word.lower()
    print(word2)
    for x in word2:
        if word2.count(x) >= 2:
            a += ')'
        else:
            a += '('

    return a
    

# def tribonacci(signature, n):
#     fib = []
#     if n == 1:
#         fib.append(1)
#     elif n < len(signature):
#         for x in range(0, n):
#             fib.append(signature[x])
#     else:
#         for y in signature:
#             fib.append(signature[y])
#
#     fib_len = len(fib)
#
#     while fib_len < (n - 1):
#         fib_len = len(fib)
#         a = 0
#         for i in range(fib_len - 3, fib_len):
#             a += fib[i]
#             fib.append(a)
#     print(fib)
#     return fib
#
#
# tribonacci([1, 1, 1], 10)
